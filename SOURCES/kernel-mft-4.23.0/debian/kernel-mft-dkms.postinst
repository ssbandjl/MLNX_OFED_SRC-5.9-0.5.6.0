#!/bin/sh
set -e

# Get the package version
NAME=kernel-mft
PACKAGE_NAME=$NAME-dkms
CVERSION=`dpkg-query -W -f='${Version}' $PACKAGE_NAME | awk -F "-" '{print $1}' | cut -d\: -f2`
ARCH=`dpkg --print-architecture`

dkms_conf_path=/usr/src/$PACKAGE_NAME-$CVERSION/dkms.conf

cpu_arch=`uname -m`
if [ "$cpu_arch" = "ppc64" ] || [ "$cpu_arch" = "ppc64le" ]; then
    # add mst_ppc_pci_reset module to dkms.conf
    if grep POST_BUILD /usr/sbin/dkms | grep -vq "post_build=" ; then
        # In new dkms build is deleted before install so we should run it in POST_BUILD
        echo "POST_BUILD=\"scripts/install_mst_ppc_pci_reset.sh \"" >> $dkms_conf_path
    else
        # In old dkms there is a bug. POST_BUILD isn't called.
        # Additionally, build is not deleted before install starts so we
        # can call install script in PRE_INSTALL instead.
        echo "PRE_INSTALL=\"scripts/install_mst_ppc_pci_reset.sh \"" >> $dkms_conf_path
    fi
fi

dkms_configure () {
	POSTINST="/usr/src/$PACKAGE_NAME-$CVERSION/common.postinst"
	if [ -f "$POSTINST" ]; then
		"$POSTINST" "$PACKAGE_NAME" "$CVERSION" "/usr/share/$PACKAGE_NAME" "$ARCH" "$2"
		return $?
	fi
	echo "WARNING: $POSTINST does not exist." >&2
	echo "ERROR: DKMS version is too old and $PACKAGE_NAME was not" >&2
	echo "built with legacy DKMS support." >&2
	echo "You must either rebuild $PACKAGE_NAME with legacy postinst" >&2
	echo "support or upgrade DKMS to a more current version." >&2
	return 1
}

case "$1" in
	configure)
		dkms_configure
	;;

	abort-upgrade|abort-remove|abort-deconfigure)
	;;

	*)
		echo "postinst called with unknown argument '$1'" >&2
		exit 1
	;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
