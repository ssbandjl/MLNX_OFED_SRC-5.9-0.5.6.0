From: Valentine Fatiev <valentinef@nvidia.com>
Subject: [PATCH] BACKPORT:
 drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec.c

Change-Id: Ib0d412b73e8cdfcac5d63f3f89cfd4f574ddfd6b
---
 .../mellanox/mlx5/core/en_accel/ipsec.c       | 35 ++++++++++++++++---
 1 file changed, 30 insertions(+), 5 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec.c
@@ -45,9 +45,11 @@
 #include <linux/ipv6.h>
 #include "../esw/ipsec.h"
 
+#ifdef HAVE_XFRM_STATE_OFFLOAD
 #ifndef XFRM_OFFLOAD_FULL
 #define XFRM_OFFLOAD_FULL 4
 #endif
+#endif /* HAVE_XFRM_STATE_OFFLOAD */
 
 struct mlx5e_ipsec_async_work {
 	struct delayed_work dwork;
@@ -68,8 +70,7 @@ static void _mlx5e_ipsec_async_event(str
  * */
 static bool ipsec_is_full_flag_set(struct xfrm_state *x)
 {
-#if 0
-	#define XFRM_OFFLOAD_FULL 4
+#ifdef HAVE_XFRM_STATE_OFFLOAD
 	return (x->xso.flags & XFRM_OFFLOAD_FULL);
 #else
 	return false;
@@ -375,9 +376,13 @@ mlx5e_ipsec_build_accel_xfrm_attrs(struc
 	}
 
 	/* action */
-	attrs->action = (x->xso.dir == XFRM_DEV_OFFLOAD_OUT) ?
-				MLX5_ACCEL_ESP_ACTION_ENCRYPT :
-				      MLX5_ACCEL_ESP_ACTION_DECRYPT;
+#ifndef HAVE_XFRM_STATE_OFFLOAD
+	attrs->action = (!(x->xso.dir == XFRM_DEV_OFFLOAD_IN)) ?
+#else
+	attrs->action = (!(x->xso.flags & XFRM_OFFLOAD_INBOUND)) ?
+#endif
+		MLX5_ACCEL_ESP_ACTION_ENCRYPT :
+		MLX5_ACCEL_ESP_ACTION_DECRYPT;
 	/* flags */
 	attrs->flags |= (x->props.mode == XFRM_MODE_TRANSPORT) ?
 			MLX5_ACCEL_ESP_FLAGS_TRANSPORT :
@@ -405,7 +410,11 @@ mlx5e_ipsec_build_accel_xfrm_attrs(struc
 
 static inline int mlx5e_xfrm_validate_state(struct xfrm_state *x)
 {
+#ifdef HAVE_NET_DEVICE_REAL_DEV
 	struct net_device *netdev = x->xso.real_dev;
+#else
+	struct net_device *netdev = x->xso.dev;
+#endif
 	struct mlx5_core_dev *mdev;
 	struct mlx5_eswitch *esw;
 	struct mlx5e_priv *priv;
@@ -524,7 +533,11 @@ static void _update_xfrm_state(struct wo
 static int mlx5e_xfrm_add_state(struct xfrm_state *x)
 {
 	struct mlx5e_ipsec_sa_entry *sa_entry = NULL;
+#ifdef HAVE_NET_DEVICE_REAL_DEV
 	struct net_device *netdev = x->xso.real_dev;
+#else
+	struct net_device *netdev = x->xso.dev;
+#endif
 	struct mlx5e_priv *priv;
 	int err;
 
@@ -559,7 +572,11 @@ static int mlx5e_xfrm_add_state(struct x
 	if (err)
 		goto err_hw_ctx;
 
+#ifndef HAVE_XFRM_STATE_OFFLOAD
 	if (x->xso.dir == XFRM_DEV_OFFLOAD_IN) {
+#else
+	if (x->xso.flags & XFRM_OFFLOAD_INBOUND) {
+#endif
 		err = mlx5e_ipsec_sadb_rx_add(sa_entry);
 		if (err)
 			goto err_add_rule;
@@ -592,7 +609,11 @@ static void mlx5e_xfrm_del_state(struct
 	if (sa_entry->is_removed)
 		return;
 
+#ifndef HAVE_XFRM_STATE_OFFLOAD
 	if (x->xso.dir == XFRM_DEV_OFFLOAD_IN)
+#else
+	if (x->xso.flags & XFRM_OFFLOAD_INBOUND)
+#endif
 		mlx5e_ipsec_sadb_rx_del(sa_entry);
 	else
 		mlx5e_ipsec_sadb_tx_del(sa_entry);
@@ -729,6 +750,7 @@ static bool mlx5e_ipsec_offload_ok(struc
 	return true;
 }
 
+#ifdef HAVE_XDO_DEV_STATE_ADVANCE_ESN
 static void mlx5e_xfrm_advance_esn_state(struct xfrm_state *x)
 {
 	struct mlx5e_ipsec_sa_entry *sa_entry = to_ipsec_sa_entry(x);
@@ -743,13 +765,16 @@ static void mlx5e_xfrm_advance_esn_state
 	mlx5e_ipsec_build_accel_xfrm_attrs(sa_entry, &modify_work->attrs);
 	queue_work(sa_entry->ipsec->wq, &modify_work->work);
 }
+#endif
 
 static const struct xfrmdev_ops mlx5e_ipsec_xfrmdev_ops = {
 	.xdo_dev_state_add	= mlx5e_xfrm_add_state,
 	.xdo_dev_state_delete	= mlx5e_xfrm_del_state,
 	.xdo_dev_state_free	= mlx5e_xfrm_free_state,
 	.xdo_dev_offload_ok	= mlx5e_ipsec_offload_ok,
+#ifdef HAVE_XDO_DEV_STATE_ADVANCE_ESN
 	.xdo_dev_state_advance_esn = mlx5e_xfrm_advance_esn_state,
+#endif
 };
 
 void mlx5e_ipsec_build_netdev(struct mlx5e_priv *priv)
