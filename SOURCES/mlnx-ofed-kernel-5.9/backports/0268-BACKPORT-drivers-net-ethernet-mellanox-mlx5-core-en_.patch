From: Aya Levin <ayal@nvidia.com>
Subject: [PATCH] BACKPORT:
 drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_tx.c

Change-Id: I21a210942afa0b8a4df4fb234bd621160c027571
---
 .../mellanox/mlx5/core/en_accel/ktls_tx.c     | 46 ++++++++++++++++++-
 1 file changed, 45 insertions(+), 1 deletion(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_tx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_tx.c
@@ -5,6 +5,7 @@
 #include "en_accel/ktls_txrx.h"
 #include "en_accel/ktls_utils.h"
 
+#ifdef HAVE_KTLS_STRUCTS
 struct mlx5e_dump_wqe {
 	struct mlx5_wqe_ctrl_seg ctrl;
 	struct mlx5_wqe_data_seg data;
@@ -13,6 +14,14 @@ struct mlx5e_dump_wqe {
 #define MLX5E_KTLS_DUMP_WQEBBS \
 	(DIV_ROUND_UP(sizeof(struct mlx5e_dump_wqe), MLX5_SEND_WQE_BB))
 
+#ifndef HAVE_TLS_OFFLOAD_DESTRUCT_WORK
+enum mlx5e_ktls_tx_flag {
+	MLX5E_KTLS_TX_FLAG_CTX_POST_PENDING,
+	MLX5E_KTLS_TX_FLAG_KEY_ID_EXISTS,
+	MLX5E_KTLS_TX_NUM_FLAGS, /* Keep last */
+};
+#endif
+
 static u8
 mlx5e_ktls_dumps_num_wqes(struct mlx5e_params *params, unsigned int nfrags,
 			  unsigned int sync_len)
@@ -90,7 +99,11 @@ struct mlx5e_ktls_offload_context_tx {
 	/* fast path */
 	u32 expected_seq;
 	u32 tisn;
+#ifndef HAVE_TLS_OFFLOAD_DESTRUCT_WORK
+	DECLARE_BITMAP(flags, MLX5E_KTLS_TX_NUM_FLAGS);
+#else
 	bool ctx_post_pending;
+#endif
 	/* control / resync */
 	struct list_head list_node; /* member of the pool */
 	struct tls12_crypto_info_aes_gcm_128 crypto_info;
@@ -225,6 +238,11 @@ err_out:
 static void mlx5e_tls_priv_tx_cleanup(struct mlx5e_ktls_offload_context_tx *priv_tx,
 				      struct mlx5e_async_ctx *async)
 {
+#ifndef HAVE_TLS_OFFLOAD_DESTRUCT_WORK
+	if (test_bit(MLX5E_KTLS_TX_FLAG_KEY_ID_EXISTS, priv_tx->flags))
+		mlx5_ktls_destroy_key(priv_tx->mdev, priv_tx->key_id);
+#endif
+
 	if (priv_tx->create_err) {
 		kfree(priv_tx);
 		return;
@@ -467,10 +485,20 @@ int mlx5e_ktls_add_tx(struct net_device
 	if (IS_ERR(priv_tx))
 		return PTR_ERR(priv_tx);
 
+#ifndef HAVE_TLS_OFFLOAD_DESTRUCT_WORK
+	if (test_bit(MLX5E_KTLS_TX_FLAG_KEY_ID_EXISTS, priv_tx->flags)) {
+		mlx5_ktls_destroy_key(priv_tx->mdev, priv_tx->key_id);
+		__clear_bit(MLX5E_KTLS_TX_FLAG_KEY_ID_EXISTS, priv_tx->flags);
+	}
+#endif
+
 	err = mlx5_ktls_create_key(pool->mdev, crypto_info, &priv_tx->key_id);
 	if (err)
 		goto err_create_key;
 
+#ifndef HAVE_TLS_OFFLOAD_DESTRUCT_WORK
+	__set_bit(MLX5E_KTLS_TX_FLAG_KEY_ID_EXISTS, priv_tx->flags);
+#endif
 	priv_tx->expected_seq = start_offload_tcp_sn;
 	priv_tx->crypto_info  =
 		*(struct tls12_crypto_info_aes_gcm_128 *)crypto_info;
@@ -478,7 +506,11 @@ int mlx5e_ktls_add_tx(struct net_device
 
 	mlx5e_set_ktls_tx_priv_ctx(tls_ctx, priv_tx);
 
+#ifndef HAVE_TLS_OFFLOAD_DESTRUCT_WORK
+	__set_bit(MLX5E_KTLS_TX_FLAG_CTX_POST_PENDING, priv_tx->flags);
+#else
 	priv_tx->ctx_post_pending = true;
+#endif
 	atomic64_inc(&priv_tx->sw_stats->tx_tls_ctx);
 
 	return 0;
@@ -499,7 +531,9 @@ void mlx5e_ktls_del_tx(struct net_device
 	pool = priv->tls->tx_pool;
 
 	atomic64_inc(&priv_tx->sw_stats->tx_tls_del);
+#ifdef HAVE_TLS_OFFLOAD_DESTRUCT_WORK
 	mlx5_ktls_destroy_key(priv_tx->mdev, priv_tx->key_id);
+#endif
 	pool_push(pool, priv_tx);
 }
 
@@ -516,6 +550,7 @@ static void tx_fill_wi(struct mlx5e_txqs
 	};
 }
 
+#ifdef HAVE_TLS_OFFLOAD_DESTRUCT_WORK
 static bool
 mlx5e_ktls_tx_offload_test_and_clear_pending(struct mlx5e_ktls_offload_context_tx *priv_tx)
 {
@@ -525,7 +560,7 @@ mlx5e_ktls_tx_offload_test_and_clear_pen
 
 	return ret;
 }
-
+#endif
 static void
 post_static_params(struct mlx5e_txqsq *sq,
 		   struct mlx5e_ktls_offload_context_tx *priv_tx,
@@ -800,7 +835,11 @@ bool mlx5e_ktls_handle_tx_skb(struct net
 	int datalen;
 	u32 seq;
 
+#ifdef HAVE_SKB_TCP_ALL_HEADERS
 	datalen = skb->len - skb_tcp_all_headers(skb);
+#else
+	datalen = skb->len - (skb_transport_offset(skb) + tcp_hdrlen(skb));
+#endif
 	if (!datalen)
 		return true;
 
@@ -817,7 +856,11 @@ bool mlx5e_ktls_handle_tx_skb(struct net
 
 	priv_tx = mlx5e_get_ktls_tx_priv_ctx(tls_ctx);
 
+#ifndef HAVE_TLS_OFFLOAD_DESTRUCT_WORK
+	if (unlikely(__test_and_clear_bit(MLX5E_KTLS_TX_FLAG_CTX_POST_PENDING, priv_tx->flags)))
+#else
 	if (unlikely(mlx5e_ktls_tx_offload_test_and_clear_pending(priv_tx)))
+#endif
 		mlx5e_ktls_tx_post_param_wqes(sq, priv_tx, false, false);
 
 	seq = ntohl(tcp_hdr(skb)->seq);
@@ -877,3 +920,4 @@ void mlx5e_ktls_cleanup_tx(struct mlx5e_
 	mlx5e_tls_tx_pool_cleanup(priv->tls->tx_pool);
 	priv->tls->tx_pool = NULL;
 }
+#endif
