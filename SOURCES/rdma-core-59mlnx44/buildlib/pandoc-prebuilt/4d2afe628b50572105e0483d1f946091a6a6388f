.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "mlx5dv_crypto_login_create / mlx5dv_crypto_login_query /
mlx5dv_crypto_login_destroy" "3" "" "" ""
.hy
.SH NAME
.PP
mlx5dv_crypto_login_create \- Creates a crypto login object
.PP
mlx5dv_crypto_login_query \- Queries the given crypto login object
.PP
mlx5dv_crypto_login_destroy \- Destroys the given crypto login object
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <infiniband/mlx5dv.h>

struct\ mlx5dv_crypto_login_obj\ *
mlx5dv_crypto_login_create(struct\ ibv_context\ *context,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ struct\ mlx5dv_crypto_login_attr_ex\ *login_attr);

int\ mlx5dv_crypto_login_query(struct\ mlx5dv_crypto_login_obj\ *crypto_login,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ struct\ mlx5dv_crypto_login_query_attr\ *query_attr);

int\ mlx5dv_crypto_login_destroy(struct\ mlx5dv_crypto_login_obj\ *crypto_login);
\f[]
.fi
.SH DESCRIPTION
.PP
When using a crypto engine that is in wrapped import method, a valid
crypto login object must be provided in order to create and query
wrapped Data Encryption Keys (DEKs).
.PP
A valid crypto login object is necessary only to create and query
wrapped DEKs.
Existing DEKs that were previously created don\[aq]t need a valid crypto
login object in order to be used (in MKey or during traffic).
.PP
\f[B]mlx5dv_crypto_login_create()\f[] creates and returns a crypto login
object with the credential given in \f[I]login_attr\f[].
Only one crypto login object can be created per device context.
The created crypto login object must be provided to
\f[B]mlx5dv_dek_create()\f[] in order to create wrapped DEKs.
.PP
\f[B]mlx5dv_crypto_login_query()\f[] queries the crypto login object
\f[I]crypto_login\f[] and returns the queried attributes in
\f[I]query_attr\f[].
.PP
\f[B]mlx5dv_crypto_login_destroy()\f[] destroys the given crypto login
object.
.SH ARGUMENTS
.SS context
.PP
The device context that will be associated with the crypto login object.
.SS login_attr
.PP
Crypto extended login attributes specify the credential to login with
and the import KEK to be used for secured communications done with the
crypto login object.
.IP
.nf
\f[C]
struct\ mlx5dv_crypto_login_attr_ex\ {
\ \ \ \ uint32_t\ credential_id;
\ \ \ \ uint32_t\ import_kek_id;
\ \ \ \ const\ void\ *credential;
\ \ \ \ size_t\ credential_len;
\ \ \ \ uint64_t\ comp_mask;
};
\f[]
.fi
.TP
.B \f[I]credential_id\f[]
An ID of a credential, from the credentials stored on the device, that
indicates the credential that should be validated against the credential
provided in \f[I]credential\f[].
.RS
.RE
.TP
.B \f[I]import_kek_id\f[]
An ID of an import KEK, from the import KEKs stored on the device, that
indicates the import KEK that will be used for unwrapping the credential
provided in \f[I]credential\f[] and also for all other secured
communications done with the crypto login object.
.RS
.RE
.TP
.B \f[I]credential\f[]
The credential to login with.
Credential is a piece of data used to authenticate the user for crypto
login.
The credential in \f[I]credential\f[] is validated against the
credential indicated by \f[I]credential_id\f[], which is stored on the
device.
The credentials must match in order for the crypto login to succeed.
\f[I]credential\f[] must be provided wrapped by the AES key wrap
algorithm using the import KEK indicated by \f[I]import_kek_id\f[].
\f[I]credential\f[] format is ENC(iv_64b + plaintext_credential) where
ENC() is AES key wrap algorithm and iv_64b is 0xA6A6A6A6A6A6A6A6 as per
the NIST SP 800\-38F AES key wrap spec, and plaintext_credential is the
credential value stored on the device.
.RS
.RE
.TP
.B \f[I]credential_len\f[]
The length of the provided \f[I]credential\f[] value in bytes.
.RS
.RE
.TP
.B \f[I]comp_mask\f[]
Reserved for future extension, must be 0 now.
.RS
.RE
.SS query_attr
.IP
.nf
\f[C]
Crypto\ login\ attributes\ to\ be\ populated\ when\ querying\ a\ crypto\ login
object.
\f[]
.fi
.IP
.nf
\f[C]
struct\ mlx5dv_crypto_login_query_attr\ {
\ \ \ \ enum\ mlx5dv_crypto_login_state\ state;
\ \ \ \ uint64_t\ comp_mask;
};
\f[]
.fi
.TP
.B \f[I]state\f[]
The state of the crypto login object, can be one of the following
.RS
.TP
.B \f[B]MLX5DV_CRYPTO_LOGIN_STATE_VALID\f[]
The crypto login object is valid and can be used.
.RS
.RE
.TP
.B \f[B]MLX5DV_CRYPTO_LOGIN_STATE_INVALID\f[]
The crypto login object is invalid and cannot be used.
A valid crypto login object can become invalid if the credential or the
import KEK used in the crypto login object were deleted while in use
(for example by a crypto officer).
In this case, \f[B]mlx5dv_crypto_login_destroy()\f[] should be called to
destroy the invalid crypto login object and if still necessary,
\f[B]mlx5dv_crypto_login_create()\f[] should be called to create a new
crypto login object with valid credential and import KEK.
.RS
.RE
.RE
.TP
.B \f[I]comp_mask\f[]
Reserved for future extension, must be 0 now.
.RS
.RE
.SH RETURN VALUE
.PP
\f[B]mlx5dv_crypto_login_create()\f[] returns a pointer to a new valid
\f[I]struct mlx5dv_crypto_login_obj\f[] on success.
On error NULL is returned and errno is set.
.PP
\f[B]mlx5dv_crypto_login_query()\f[] returns 0 on success and fills
\f[I]query_attr\f[] with the queried attributes.
On error, errno is returned.
.PP
\f[B]mlx5dv_crypto_login_destroy()\f[] returns 0 on success and errno on
error.
.SH SEE ALSO
.PP
\f[B]mlx5dv_dek_create\f[](3), \f[B]mlx5dv_query_device\f[](3)
.SH AUTHORS
.PP
Avihai Horon <avihaih@nvidia.com>
